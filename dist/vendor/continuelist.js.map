{"version":3,"sources":["../../src/vendor/continuelist.js"],"names":["listRE","emptyListRE","unorderedListRE","commands","newlineAndIndentContinueMarkdownList","cm","getOption","Pass","ranges","listSelections","replacements","i","length","pos","head","eolState","getStateAfter","line","inList","list","inQuote","quote","getLine","match","exec","empty","execCommand","test","replaceRange","ch","indent","after","bullet","indexOf","parseInt","replaceSelections"],"mappings":";;AAGA;;;;;;AAEA,IAAMA,SAAS,qCAAf;AAAA,IACIC,cAAc,oCADlB;AAAA,IAEIC,kBAAkB,SAFtB,C,CALA;AACA;;AAQA,qBAAWC,QAAX,CAAoBC,oCAApB,GAA2D,UAASC,EAAT,EAAa;AACtE,MAAIA,GAAGC,SAAH,CAAa,cAAb,CAAJ,EAAkC,OAAO,qBAAWC,IAAlB;AAClC,MAAIC,SAASH,GAAGI,cAAH,EAAb;AAAA,MAAkCC,eAAe,EAAjD;AACA,OAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAIH,OAAOI,MAA3B,EAAmCD,GAAnC,EAAwC;AACtC,QAAIE,MAAML,OAAOG,CAAP,EAAUG,IAApB;AACA,QAAIC,WAAWV,GAAGW,aAAH,CAAiBH,IAAII,IAArB,CAAf;AACA,QAAIC,SAASH,SAASI,IAAT,KAAkB,KAA/B;AACA,QAAIC,UAAUL,SAASM,KAAT,KAAmB,CAAjC;;AAEA,QAAIJ,OAAOZ,GAAGiB,OAAH,CAAWT,IAAII,IAAf,CAAX;AAAA,QAAiCM,QAAQvB,OAAOwB,IAAP,CAAYP,IAAZ,CAAzC;AACA,QAAI,CAACT,OAAOG,CAAP,EAAUc,KAAV,EAAD,IAAuB,CAACP,MAAD,IAAW,CAACE,OAAnC,IAA+C,CAACG,KAApD,EAA2D;AACzDlB,SAAGqB,WAAH,CAAe,kBAAf;AACA;AACD;AACD,QAAIzB,YAAY0B,IAAZ,CAAiBV,IAAjB,CAAJ,EAA4B;AAC1BZ,SAAGuB,YAAH,CAAgB,EAAhB,EAAoB;AAClBX,cAAMJ,IAAII,IADQ,EACFY,IAAI;AADF,OAApB,EAEG;AACDZ,cAAMJ,IAAII,IADT,EACeY,IAAIhB,IAAIgB,EAAJ,GAAS;AAD5B,OAFH;AAKAnB,mBAAaC,CAAb,IAAkB,IAAlB;AACD,KAPD,MAOO;AACL,UAAImB,SAASP,MAAM,CAAN,CAAb;AAAA,UAAuBQ,QAAQR,MAAM,CAAN,CAA/B;AACA,UAAIS,SAAS9B,gBAAgByB,IAAhB,CAAqBJ,MAAM,CAAN,CAArB,KAAkCA,MAAM,CAAN,EAASU,OAAT,CAAiB,GAAjB,KAAyB,CAA3D,GACTV,MAAM,CAAN,CADS,GAERW,SAASX,MAAM,CAAN,CAAT,EAAmB,EAAnB,IAAyB,CAA1B,GAA+B,GAFnC;;AAIAb,mBAAaC,CAAb,IAAkB,OAAOmB,MAAP,GAAgBE,MAAhB,GAAyBD,KAA3C;AACD;AACF;;AAED1B,KAAG8B,iBAAH,CAAqBzB,YAArB;AACD,CAhCD","file":"continuelist.js","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: http://codemirror.net/LICENSE\n\nimport CodeMirror from 'codemirror';\n\nconst listRE = /^(\\s*)(>[> ]*|[*+-]\\s|(\\d+)\\.)(\\s*)/,\n    emptyListRE = /^(\\s*)(>[> ]*|[*+-]|(\\d+)\\.)(\\s*)$/,\n    unorderedListRE = /[*+-]\\s/;\n\nCodeMirror.commands.newlineAndIndentContinueMarkdownList = function(cm) {\n  if (cm.getOption(\"disableInput\")) return CodeMirror.Pass;\n  var ranges = cm.listSelections(), replacements = [];\n  for (var i = 0; i < ranges.length; i++) {\n    var pos = ranges[i].head;\n    var eolState = cm.getStateAfter(pos.line);\n    var inList = eolState.list !== false;\n    var inQuote = eolState.quote !== 0;\n\n    var line = cm.getLine(pos.line), match = listRE.exec(line);\n    if (!ranges[i].empty() || (!inList && !inQuote) || !match) {\n      cm.execCommand(\"newlineAndIndent\");\n      return;\n    }\n    if (emptyListRE.test(line)) {\n      cm.replaceRange(\"\", {\n        line: pos.line, ch: 0\n      }, {\n        line: pos.line, ch: pos.ch + 1\n      });\n      replacements[i] = \"\\n\";\n    } else {\n      var indent = match[1], after = match[4];\n      var bullet = unorderedListRE.test(match[2]) || match[2].indexOf(\">\") >= 0\n        ? match[2]\n        : (parseInt(match[3], 10) + 1) + \".\";\n\n      replacements[i] = \"\\n\" + indent + bullet + after;\n    }\n  }\n\n  cm.replaceSelections(replacements);\n};\n"]}